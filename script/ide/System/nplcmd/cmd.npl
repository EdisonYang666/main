--[[
title: NPL cmd
author: chenqh
date: 2017/12/29
desc: default bootstrapper for nplc, automate parse the nplc commands and execute it
------------------------------------------------------------------------------------
nplc script sample:
------------------------------------------------------------------------------------
#!/usr/bin/env nplc

local _M = {}

-- Important: cmd will load the file and try to execute function "run" if it exists
function _M.run()
    print("hello world!")
end

return _M
------------------------------------------------------------------------------------
It's recommend to put the script into /usr/local/bin, same as nplc.
And you can run "nplc your_script" to test it in development in any folder,
please don't use relative path of your script file here.
------------------------------------------------------------------------------------
]]

NPL.load("(gl)script/ide/System/nplcmd/console.npl")
NPL.load("(gl)script/ide/System/nplcmd/extension.npl")

local binder = "%+"
local ctx = {}
local args = ParaEngine.GetAppCommandLineByParam("nplcmd", "")

local function cmd_begin()
    ctx.path = ParaEngine.GetAppCommandLineByParam("cmd_path", "")
end

local function cmd_end()
    if not ctx.keep_alive then ParaGlobal.Exit(0) end
end

-- example
-- in: "-i+-p+test+specs"
-- out: {"-i", "-p"}, "test", {"spec"}
local function cmd_parser(args)
    local options = {}
    local file = nil
    local params = {}
    local step = "option" -- 1.options 2.file 3.params

    for arg in args:gmatch(format("[^%s]+", binder)) do
        if step == "option" then
            if arg:match("^-%w$") then
                table.insert(options, arg)
            else
                file = arg
                step = "params"
            end
        elseif(step == "params") then
            table.insert(params, arg)
        else
            error(format("invalid args %s on arg %s", args, arg))
        end
    end

    return options, file, params
end

-- nplc will concat the command line args with '+'
-- for example:
-- command line: nplc -i  -p test specs
-- args: "-i+-p+test+specs"
local function cmd_exec(args, ctx)
    local options, file, params = cmd_parser(args)
    ctx.arg = params

    if(not file) then
        local console = commonlib.gettable("System.Nplcmd.Console")
        console.run()
    else
        local cmd = NPL.load(file)
        if type(cmd) == "function" then
            cmd(ctx)
        elseif cmd == false then
            print(format("Load script %s failed!", file))
        else
            print("Warning: no function to handle the cmd!")
        end
    end
end

cmd_begin()
xpcall(
    function()
        cmd_exec(args, ctx)
    end,
    function(e)
        print(e)
        print(debug.traceback())
    end
)
cmd_end()

NPL.this(function() end)
